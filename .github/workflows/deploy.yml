# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Build and Deploy Carmada

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
  
      - name: Successful Checkout
        run: |
          echo "Successful Checkout" >> file.txt
        
      - name: Update Secrets
        run: |
          cd src/main/resources/
          sed -i "s|spring.datasource.login.username=|spring.datasource.login.username=${{ secrets.DATABASE_USERNAME }}|g" application.properties
          sed -i "s|spring.datasource.login.password=|spring.datasource.login.password=${{ secrets.DATABASE_PASSWORD }}|g" application.properties
          sed -i "s|spring.datasource.drivers.username=|spring.datasource.drivers.username=${{ secrets.DATABASE_USERNAME }}|g" application.properties
          sed -i "s|spring.datasource.drivers.password=|spring.datasource.drivers.password=${{ secrets.DATABASE_PASSWORD }}|g" application.properties
          sed -i "s|spring.security.oauth2.client.registration.cognito.clientId=|spring.security.oauth2.client.registration.cognito.clientId=${{ secrets.COGNITO_CLIENTID }}|g" application.properties
          sed -i "s|spring.security.oauth2.client.registration.cognito.clientSecret=|spring.security.oauth2.client.registration.cognito.clientSecret=${{ secrets.COGNITO_SECRET }}|g" application.properties
          sed -i "s|spring.security.oauth2.client.provider.cognito.issuerUri=|spring.security.oauth2.client.provider.cognito.issuerUri=${{ secrets.COGNITO_ISSUERID }}|g" application.properties
          cat application.properties
         
      - name: Check Java Installation
        run: java -version
        
      - name: Successful Java Version
        run: |
          echo "Successful Java Version" >> file.txt

      - name: Build with Maven
        run: mvn clean compile package -Dmaven.test.skip=true
        
      - name: Copy JAR file for upload
        run: |
          cd target
          mkdir deployment
          cp *.jar deployment
          cp ../Dockerfile deployment
        
      - name: Upload Artifact for Deployment
        uses: actions/upload-artifact@v2
        with: 
          name: files-for-deployment
          path: target/deployment
          
  deploy:
      runs-on: self-hosted
      needs: [build]

      steps:
        - name: Stop Docker Container
          shell: bash {0}
          run: |
            docker container stop carmada-docker
            docker container rm carmada-docker
            
        - name: Download Artifacts
          uses: actions/download-artifact@v2
          with:
            name: files-for-deployment  # Specify the name of the artifact to download
            path: .   # Specify the local directory where the artifact will be stored
            
        - name: Copy Files for Deployment
          run: |
            cd /home/ec2-user/actions-runner/deployment/carmada/carmada
            cp *.jar /home/ec2-user
            cp Dockerfile /home/ec2-user
            echo "Successful Download of Jar File" >> log.txt
        
        - name: Stop Docker Container, Build Docker Image, Start Docker Container
          shell: bash {0}
          run: |
            cd /home/ec2-user
            docker build -t carmada-docker .
            docker run --name carmada-docker --restart=always -d -p 8080:8080 carmada-docker
            echo "Successful Deployment of Docker Container" >> log.txt
            
        
#       - name: Deploy to Runner
#         run: |
#           # Replace with your deployment commands
#           # For example, copy the JAR file to the runner and run it
#           cp target/my-app.jar /path/to/runner
#           cd /path/to/runner
#           java -jar my-app.jar

#        # Optional: Uploads the full dependency graph to GitHub to improve the quality of Dependabot alerts this repository can receive
#       - name: Update dependency graph
#         uses: advanced-security/maven-dependency-submission-action@571e99aab1055c2e71a1e2309b9691de18d6b7d6
